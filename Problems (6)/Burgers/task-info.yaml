type: code
files:
- name: src/Main.java
  visible: true
  text: |-
    class TestDrive {
        public static void main(String[] args) throws InterruptedException {
            BurgerStore mcDonalds = /* write your code here */
            BurgerStore burgerKing = /* write your code here */

            Burger burger;

            System.out.println("-Hello, one McDonalds style cheeseburger");
            System.out.println("-Okay! Please wait for a sec, -Calling to the McDonaldsStore. -Cheeseburger");
            burger = mcDonalds.orderBurger(Burger.CHEESE);
            Thread.sleep(1500);
            System.out.println("There it is!");
            System.out.println(burger.getName() + "\n");

            System.out.println("-Hello, one BurgerKing style hamburger");
            System.out.println("-Okay! Please wait for a sec, -Calling to the BurgerKingStore. -Hamburger\"");
            burger = burgerKing.orderBurger(Burger.HAMBURGER);
            Thread.sleep(1500);
            System.out.println("There it is!");
            System.out.println(burger.getName());
        }
    }

    abstract class BurgerStore {

        protected abstract Burger createBurger(String type);

        Burger orderBurger(String type) {
            Burger burger = createBurger(type);
            System.out.println("--- Making a " + burger.getName() + " ----");
            burger.collect();
            burger.box();
            return burger;
        }
    }

    class McDonStore extends BurgerStore {
        @Override
        protected Burger createBurger(String type) {
            Burger burger = null;
            BurgerIngredientFactory ingredientFactory = /* write your code here */

            switch (type) {
                case Burger.CHEESE :
                    burger = /* write your code here */
                    burger.setName("McDonalds Style Cheeseburger");
                    break;
                case Burger.VEGAN :
                    burger = /* write your code here */
                    burger.setName("McDonalds Style VeganBurger");
                    break;
                default:
                    burger = /* write your code here */
                    burger.setName("McDonalds Style Hamburger");
                    break;
            }

            if (burger !=null) {
                burger.setBox("McDonalds Box");
            }

            return burger;
        }
    }

    class BurgerKingStore extends BurgerStore {
        @Override
        protected Burger createBurger(String type) {
            Burger burger = null;
            BurgerIngredientFactory ingredientFactory = /* write your code here */

            switch (type) {
                case Burger.CHEESE :
                    burger = /* write your code here */
                    burger.setName("BurgerKing Style Cheeseburger");
                    break;
                case Burger.VEGAN :
                    burger = /* write your code here */
                    burger.setName("BurgerKing Style VeganBurger");
                    break;
                default:
                    burger = /* write your code here */
                    burger.setName("BurgerKing Style Hamburger");
                    break;
            }

            if (burger !=null) {
                burger.setBox("BurgerKing Box");
            }

            return burger;
        }
    }

    interface BurgerIngredientFactory {
        Bun createBun();
        Cheese createCheese();
        Cutlet createCutlet();
        Sauce createSauce();
    }

    class McDonIngredientFactory implements BurgerIngredientFactory {
        @Override
        public Bun createBun() {
            return /* write your code here */
        }

        @Override
        public Cheese createCheese() {
            return /* write your code here */
        }

        @Override
        public Cutlet createCutlet() {
            return /* write your code here */
        }

        @Override
        public Sauce createSauce() {
            return /* write your code here */
        }
    }

    class BurgerKingIngredientFactory implements BurgerIngredientFactory {
        @Override
        public Bun createBun() {
            return /* write your code here */
        }

        @Override
        public Cheese createCheese() {
            return /* write your code here */
        }

        @Override
        public Cutlet createCutlet() {
            return /* write your code here */
        }

        @Override
        public Sauce createSauce() {
            return /* write your code here */
        }
    }

    abstract class Burger {
        static final String CHEESE = "cheese";
        static final String HAMBURGER = "hamburger";
        static final String VEGAN = "vegan";

        String box;
        String name;
        Bun bun;
        Cutl